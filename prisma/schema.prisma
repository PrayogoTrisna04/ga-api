// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Category {
  id        String   @id @default(uuid())
  name      String
  prefix    String
  is_deleted Boolean @default(false)
  is_device Boolean @default(false)
  createdAt DateTime @default(now())
  assets    Asset[]
}

model Asset {
  id            String   @id @default(uuid())
  name          String
  code          String   @unique
  isMaintenance Boolean  @default(false)
  categoryId    String
  is_deleted    Boolean @default(false)
  serial_number String?
  createdAt     DateTime @default(now())
  // approvals     Approval[]
  // assignments   AssetAssignment[]
  category      Category @relation(fields: [categoryId], references: [id])
}

// model User {
//   id                 String               @id @default(cuid())
//   name               String
//   email              String               @unique
//   password           String
//   role               Role                 @default(USER)
//   createdAt          DateTime             @default(now())
//   AssetAssignment    AssetAssignment[]
//   ProcurementRequest ProcurementRequest[]
// }

enum Role {
  USER
  ADMIN
  GA
}

// model Vendor {
//   id            Int             @id @default(autoincrement())
//   name          String
//   email         String?
//   phone         String?
//   address       String?
//   quotes        VendorQuote[]
//   po            PurchaseOrder[]
//   createdAt     DateTime        @default(now())
//   VendorProduct VendorProduct[]
// }

// model AssetAssignment {
//   id         Int       @id @default(autoincrement())
//   assetId    String
//   userId     String
//   assignedAt DateTime  @default(now())
//   returnedAt DateTime?

//   approvedBy String?
//   approvedAt DateTime?

//   asset Asset @relation(fields: [assetId], references: [id])
//   user  User  @relation(fields: [userId], references: [id])
// }

// model ProcurementRequest {
//   id          Int           @id @default(autoincrement())
//   title       String
//   description String
//   requestedBy String
//   status      RequestStatus @default(DRAFT)
//   createdAt   DateTime      @default(now())

//   user          User           @relation(fields: [requestedBy], references: [id])
//   quotes        VendorQuote[]
//   purchaseOrder PurchaseOrder?
// }

enum RequestStatus {
  DRAFT
  WAITING_APPROVAL
  APPROVED
  REJECTED
  ORDERED
  COMPLETED
}

// model VendorQuote {
//   id            Int      @id @default(autoincrement())
//   procurementId Int
//   vendorId      Int
//   itemName      String
//   price         Int
//   currency      String   @default("IDR")
//   taxIncluded   Boolean  @default(false)
//   termOfPayment String?
//   createdAt     DateTime @default(now())

//   procurement ProcurementRequest @relation(fields: [procurementId], references: [id])
//   vendor      Vendor             @relation(fields: [vendorId], references: [id])
// }

// model PurchaseOrder {
//   id            Int      @id @default(autoincrement())
//   procurementId Int      @unique // ‚Üê tambahkan ini
//   vendorId      Int
//   totalAmount   Int
//   poDate        DateTime @default(now())

//   procurement ProcurementRequest @relation(fields: [procurementId], references: [id])
//   vendor      Vendor             @relation(fields: [vendorId], references: [id])
// }

// model VendorProduct {
//   id        Int      @id @default(autoincrement())
//   vendorId  Int
//   name      String
//   spec      String
//   price     Int
//   available Boolean  @default(true)
//   createdAt DateTime @default(now())

//   vendor Vendor @relation(fields: [vendorId], references: [id])
// }

enum SubmissionType {
  PROCUREMENT
  MAINTENANCE
  WRITE_OFF
  ASSIGNMENT
}

// model SubmissionDetail {
//   id             String         @id @default(uuid())
//   submissionType SubmissionType
//   refId          String
//   title          String
//   description    String?
//   assetId        String?
//   condition      String?
//   location       String?
//   reason         String?
//   urgency        String?
//   createdBy      String
//   createdAt      DateTime       @default(now())
//   // Approval       Approval[]
// }

model Approval {
  id             Int            @id @default(autoincrement())
  submissionType SubmissionType
  status         RequestStatus  @default(DRAFT)
  notes          String?
  approvedBy     String?
  assetsRequest  String?
  createdBy      String
  requestedBy    String
  createdAt      DateTime       @default(now())
}
